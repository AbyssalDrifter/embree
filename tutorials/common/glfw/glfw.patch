From e022142abd924a8c31cd38f73fa84c957dacf38e Mon Sep 17 00:00:00 2001
From: Florian Reibold <florian.reibold@intel.com>
Date: Fri, 3 Feb 2023 20:34:13 +0100
Subject: [PATCH] replace LoadLibraryA with LoadLibraryExA and restrict lookup
 to SYSTEM32 on Windows

---
 src/wgl_context.c    |  2 +-
 src/win32_init.c     | 12 ++++++------
 src/win32_platform.h |  2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/wgl_context.c b/src/wgl_context.c
index 696c4cba..4ea378ce 100644
--- a/src/wgl_context.c
+++ b/src/wgl_context.c
@@ -427,7 +427,7 @@ GLFWbool _glfwInitWGL(void)
     if (_glfw.wgl.instance)
         return GLFW_TRUE;
 
-    _glfw.wgl.instance = LoadLibraryA("opengl32.dll");
+    _glfw.wgl.instance = LoadLibraryExA("opengl32.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (!_glfw.wgl.instance)
     {
         _glfwInputError(GLFW_PLATFORM_ERROR, "WGL: Failed to load opengl32.dll");
diff --git a/src/win32_init.c b/src/win32_init.c
index b2a0a679..8d4b7e18 100644
--- a/src/win32_init.c
+++ b/src/win32_init.c
@@ -64,7 +64,7 @@ BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, LPVOID reserved)
 //
 static GLFWbool loadLibraries(void)
 {
-    _glfw.win32.winmm.instance = LoadLibraryA("winmm.dll");
+    _glfw.win32.winmm.instance = LoadLibraryExA("winmm.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (!_glfw.win32.winmm.instance)
     {
         _glfwInputError(GLFW_PLATFORM_ERROR, "Win32: Failed to load winmm.dll");
@@ -74,7 +74,7 @@ static GLFWbool loadLibraries(void)
     _glfw.win32.winmm.timeGetTime = (TIMEGETTIME_T)
         GetProcAddress(_glfw.win32.winmm.instance, "timeGetTime");
 
-    _glfw.win32.user32.instance = LoadLibraryA("user32.dll");
+    _glfw.win32.user32.instance = LoadLibraryExA("user32.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (!_glfw.win32.user32.instance)
     {
         _glfwInputError(GLFW_PLATFORM_ERROR, "Win32: Failed to load user32.dll");
@@ -86,7 +86,7 @@ static GLFWbool loadLibraries(void)
     _glfw.win32.user32.ChangeWindowMessageFilterEx = (CHANGEWINDOWMESSAGEFILTEREX_T)
         GetProcAddress(_glfw.win32.user32.instance, "ChangeWindowMessageFilterEx");
 
-    _glfw.win32.dinput8.instance = LoadLibraryA("dinput8.dll");
+    _glfw.win32.dinput8.instance = LoadLibraryExA("dinput8.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (_glfw.win32.dinput8.instance)
     {
         _glfw.win32.dinput8.DirectInput8Create = (DIRECTINPUT8CREATE_T)
@@ -107,7 +107,7 @@ static GLFWbool loadLibraries(void)
 
         for (i = 0;  names[i];  i++)
         {
-            _glfw.win32.xinput.instance = LoadLibraryA(names[i]);
+            _glfw.win32.xinput.instance = LoadLibraryExA(names[i], NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
             if (_glfw.win32.xinput.instance)
             {
                 _glfw.win32.xinput.XInputGetCapabilities = (XINPUTGETCAPABILITIES_T)
@@ -120,7 +120,7 @@ static GLFWbool loadLibraries(void)
         }
     }
 
-    _glfw.win32.dwmapi.instance = LoadLibraryA("dwmapi.dll");
+    _glfw.win32.dwmapi.instance = LoadLibraryExA("dwmapi.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (_glfw.win32.dwmapi.instance)
     {
         _glfw.win32.dwmapi.DwmIsCompositionEnabled = (DWMISCOMPOSITIONENABLED_T)
@@ -129,7 +129,7 @@ static GLFWbool loadLibraries(void)
             GetProcAddress(_glfw.win32.dwmapi.instance, "DwmFlush");
     }
 
-    _glfw.win32.shcore.instance = LoadLibraryA("shcore.dll");
+    _glfw.win32.shcore.instance = LoadLibraryExA("shcore.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);
     if (_glfw.win32.shcore.instance)
     {
         _glfw.win32.shcore.SetProcessDpiAwareness = (SETPROCESSDPIAWARENESS_T)
diff --git a/src/win32_platform.h b/src/win32_platform.h
index c0dcff15..7e538e79 100644
--- a/src/win32_platform.h
+++ b/src/win32_platform.h
@@ -210,7 +210,7 @@ typedef VkBool32 (APIENTRY *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(
 
 #define _GLFW_WNDCLASSNAME L"GLFW30"
 
-#define _glfw_dlopen(name) LoadLibraryA(name)
+#define _glfw_dlopen(name) LoadLibraryExA(name, NULL, LOAD_LIBRARY_SEARCH_SYSTEM32)
 #define _glfw_dlclose(handle) FreeLibrary((HMODULE) handle)
 #define _glfw_dlsym(handle, name) GetProcAddress((HMODULE) handle, name)
 
-- 
2.38.1.windows.1

