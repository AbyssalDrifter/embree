.TH "rtcSetDeviceMemoryMonitorFunction" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcSetDeviceMemoryMonitorFunction\ \-\ registers\ a\ callback\ function\ to\ track\ memory\ consumption
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

typedef\ bool\ (*RTCMemoryMonitorFunction)(void*\ userPtr,\ const\ ssize_t\ bytes,\ const\ bool\ post);

void\ rtcSetDeviceMemoryMonitorFunction(RTCDevice\ device,\ RTCMemoryMonitorFunction\ func,\ void*\ userPtr);
\f[]
.fi
.SS DESCRIPTION
.PP
Using the \f[C]rtcSetDeviceMemoryMonitorFunction\f[] call, it is
possible to register a callback function per device that is called
whenever internal memory is allocated or deallocated by objects of that
device.
Using this memory monitor callback mechanism, the application can track
the memory consumption of an Embree device, and optionally terminate API
calls that consume too much memory.
.PP
Only a single callback function can get registered per device and
further invokations overwrite the previously set callback function.
Passing \f[C]NULL\f[] as function pointer to
\f[C]rtcSetDeviceMemoryMonitorFunction\f[] disables the set callback
function again.
.PP
Once registered the Embree device will invoke the memory monitor
callback function before or after it allocates or frees important memory
blocks.
The \f[C]userPtr\f[] value that is set at registration time is passed to
each invokation of the callback function.
The callback function might get called from multiple threads
concurrently.
.PP
The application can track the current memory usage of the Embree device
by atomically accumulating the \f[C]bytes\f[] input parameter provided
to the callback function.
This parameter will be >0 for allocations and <0 for deallocations.
The \f[C]post\f[] input parameter is true if the callback function was
invoked after the allocation (or deallocation), otherwise it is false.
.PP
Embree will continue its operation normally when returning \f[C]true\f[]
from the callback function.
If \f[C]false\f[] is returned, Embree will cancel the current operation
with the\f[C]RTC_OUT_OF_MEMORY\f[] error code.
Issuing multiple cancel requests from different threads is allowed.
Cancelling will only happen when the callback was called for allocations
(bytes > 0), otherwise the cancel request will be ignored.
.PP
If a callback to cancel was invoked before the allocation happens
(\f[C]post\ ==\ false\f[]), then the \f[C]bytes\f[] parameter should not
get accumulated, as the allocation will never happen.
If the callback to cancel was invoked after the allocation happened
(\f[C]post\ ==\ true\f[]), then the \f[C]bytes\f[] parameter should get
accumulated, as the allocation properly happened and a deallocation will
later free that data bock again.
.SS EXIT STATUS
.PP
On failure an error code is set that can get queried using
\f[C]rtcDeviceGetError\f[].
.SS SEE ALSO
.PP
[rtcNewDevice]
