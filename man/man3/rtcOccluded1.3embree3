.TH "rtcOccluded1" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcOccluded1\ \-\ find\ any\ hit\ for\ single\ ray
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

void\ rtcOccluded1(
\ \ RTCScene\ scene,
\ \ struct\ RTCIntersectContext*\ context,
\ \ struct\ RTCRay*\ ray
);
\f[]
.fi
.SS DESCRIPTION
.PP
The \f[C]rtcOccluded1\f[] function checks for a single ray (\f[C]ray\f[]
argument) if there is any hit with the scene (\f[C]scene\f[] argument).
No hit is reported, but in case a hit got found the \f[C]geomID\f[]
component of the ray is set to \f[C]0\f[].
See Section \f[C]RTCRay\f[] for a description of the ray layout and how
to setup a ray.
.PP
The intersection context (\f[C]context\f[] argument) can specify some
flags to optimize traversal and a filter callback function to be invoked
for every intersection.
Further the pointer to the intersection context is propagated to
callback functions invoked during traversal and can thus be used to
extend the ray with additional data.
See Section \f[C]RTCIntersectContext\f[] for more information.
.PP
The ray pointer passed to callback functions is not guaranteed to be
identical to the original ray provided.
To extend the ray with additional data to be accessed in callback
functions use the intersection context.
.PP
The ray has to be aligned to 16 bytes.
.SS EXIT STATUS
.PP
For performance reasons this function does not do any error checks, thus
will not set any error flags on failure.
.SS SEE ALSO
.PP
[rtcOccluded1]
