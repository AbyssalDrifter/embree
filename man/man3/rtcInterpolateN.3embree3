.TH "rtcInterpolateN" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcInterpolateN\ \-\ performs\ N\ interpolations\ of\ vertex\ attribute\ data
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

struct\ RTCInterpolateNArguments
{
\ \ RTCGeometry\ geometry;
\ \ const\ void*\ valid;
\ \ const\ unsigned\ int*\ primIDs;
\ \ const\ float*\ u;
\ \ const\ float*\ v;
\ \ unsigned\ int\ numUVs;
\ \ enum\ RTCBufferType\ buffer;
\ \ float*\ P;
\ \ float*\ dPdu;
\ \ float*\ dPdv;
\ \ float*\ ddPdudu;
\ \ float*\ ddPdvdv;
\ \ float*\ ddPdudv;
};

void\ rtcInterpolateN(const\ struct\ RTCInterpolateNArguments*\ const\ args);
\f[]
.fi
.SS DESCRIPTION
.PP
The \f[C]rtcInterpolateN\f[] is similar to \f[C]rtcInterpolate\f[], but
performs \f[C]numUVs\f[] many interpolations at once.
It additionally gets an array of u/v coordinates and a valid mask
(\f[C]valid\f[] parameter) that specifies which of these coordinates are
valid.
The valid mask points to \f[C]numUVs\f[] integers and a value of \-1
denotes valid and 0 invalid.
If the valid pointer is NULL all elements are considers valid.
The destination arrays are filled in structure of array (SoA) layout.
The value \f[C]numUVs\f[] has to be divisible by 4.
.PP
To use \f[C]rtcInterpolateN\f[] for some geometry, all changes to that
geometry have to be properly commited using \f[C]rtcCommitGeometry\f[].
.SS EXIT STATUS
.PP
For performance reasons this function does not do any error checks, thus
will not set any error flags on failure.
.SS SEE ALSO
.PP
[rtcInterpolate]
