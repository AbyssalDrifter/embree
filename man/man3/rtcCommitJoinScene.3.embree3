.TH "rtcCommitJoinScene" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcCommitJoinScene\ \-\ commits\ the\ scene\ from\ multiple\ threads
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

void\ rtcCommitJoinScene(RTCScene\ scene);
\f[]
.fi
.SS DESCRIPTION
.PP
The \f[C]rtcCommitJoinScene\f[] function triggers the commit of all
changes for the specified scene and lets the calling thread join that
commit operation.
The \f[C]rtcCommitJoinScene\f[] function can get called from multiple
threads, which all cooperate in the same scene commit.
All threads will return again from this function after the scene commit
is finished.
All thread have to consistently call \f[C]rtcCommitJoinScene\f[] and not
\f[C]rtcCommit\f[].
.PP
The scene commit internally triggers building of a spatial acceleration
structure for the scene.
Ray queries can get performed after scene changes got properly
committed.
.PP
The \f[C]rtcCommitJoinScene\f[] feature allows a flexible way to lazily
create hierarchies during rendering.
A thread reaching a not yet constructed sub\-scene of a two\-level
scene, can generate the sub\-scene geometry and call
\f[C]rtcCommitJoinScene\f[] on that just generated scene.
During construction, further threads reaching the not\-yet\-built scene,
can join the build operation by also invoking
\f[C]rtcCommitJoinScene\f[].
A thread that calls \f[C]rtcCommitJoin\f[] after the build finishes,
will directly return from the \f[C]rtcCommitJoin\f[] call.
.PP
Multiple such scene commit operations on different scenes can be running
at the same time, e.g.
this way it is possible to commit many small scenes in parallel using
just one thread per commit operation.
.PP
When using Embree with the IntelÂ® Threading Building Blocks (which is
the default), threads that call \f[C]rtcCommitJoin\f[] will join the
build operation, but other TBB worker threads might also participate in
the build.
To avoid thread oversubscription, we recommend using TBB also inside the
application.
Further, the join mode only works properly starting with TBB v4.4 Update
1.
For earlier TBB versions threads that call \f[C]rtcCommitJoinScene\f[]
to join a running build will just trigger the build and wait for the
build to finish.
.PP
When using Embree with the internal tasking system, exclusively threads
that call \f[C]rtcCommitJoinScene\f[] will perform the build operation,
and no additional worker threads are scheduled.
.PP
When using Embree with the Parallel Patterns Library (PPL)
\f[C]rtcCommitJoinScene\f[] is not supported.
.SS EXIT STATUS
.PP
On failure an error code is set that can get queried using
\f[C]rtcDeviceGetError\f[].
.SS SEE ALSO
.PP
[rtcCommitScene]
