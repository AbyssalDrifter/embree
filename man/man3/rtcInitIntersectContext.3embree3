.TH "rtcInitIntersectContext" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcInitIntersectContext\ \-\ initialized\ intersection\ context
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

enum\ RTCIntersectContextFlags
{
\ \ RTC_INTERSECT_CONTEXT_FLAG_NONE\ \ \ \ \ \ \ =\ 0,
\ \ RTC_INTERSECT_CONTEXT_FLAG_INCOHERENT\ =\ (0\ <<\ 0),
\ \ RTC_INTERSECT_CONTEXT_FLAG_COHERENT\ \ \ =\ (1\ <<\ 0)
};

struct\ RTCIntersectContext
{
\ \ enum\ RTCIntersectContextFlags\ flags;
\ \ RTCFilterFunctionN\ filter;
\ \ unsigned\ int\ instID;
};

void\ rtcInitIntersectContext(struct\ RTCIntersectContext*\ context);
\f[]
.fi
.SS DESCRIPTION
.PP
A per ray query intersection context (\f[C]RTCIntersectContext\f[] type)
is supported that can be used to configure some intersection flags
(\f[C]flags\f[] member), specify a filter callback function
(\f[C]filter\f[] member), specify the ID of the current instance
(\f[C]instID\f[] member), and to attach arbitrary data to the query
(e.g.
per ray data).
.PP
The \f[C]rtcInitIntersectContext\f[] initializes the context to default
values and should get called for every intersection context.
This function get inlined which minimizes overhead and allows for
compiler optimizations.
.PP
The intersect context flag can be used to tune the behaviour of the
traversal algorithm.
Using the \f[C]RTC_INTERSECT_CONTEXT_FLAG_INCOHERENT\f[] flags uses an
optimized traversal algorithm for incoherent rays (default), while
\f[C]RTC_INTERSECT_CONTEXT_FLAG_COHERENT\f[] uses in optimized traversal
algorithm for coherent rays (e.g.
primary camera rays).
.PP
Best primary ray performance can be obtained by using the ray stream API
and setting the intersect context flag to
\f[C]RTC_INTERSECT_CONTEXT_FLAG_COHERENT\f[].
For secondary rays, it is typically better to use the
\f[C]RTC_INTERSECT_CONTEXT_FLAG_INCOHERENT\f[] flags, unless the rays
are known to be very coherent too (e.g.
for primary transparency rays).
.PP
A filter function can get specified inside the context.
This filter function is invoked as a second filter stage after the per
geometry intersect or occluded filter function is invoked.
Only rays that passed the first filter stage are valid in this second
filter stage.
Having such a per ray\-query filter function can be usefull to implement
modification of the behavior of the query, such as collecting all hit,
or accumulating transparencies.
The support for the context filter function has to get enabled for a
scene by using the \f[C]RTC_SCENE_FLAG_CONTEXT_FILTER_FUNCTION\f[] scene
flag.
.PP
Is is guaranteed that the pointer to the intersection context passed to
a ray query is directly passed to registered callback functions.
This way it is possible to attach arbitrary data to the end of the
intersection context, such as a per\-ray payload.
.PP
Please not that the ray pointer is not guaranteed to get passed to the
callback functions, thus reading additional data from the ray pointer
passed to callbacks is not possible.
.SS EXIT STATUS
.PP
No error code is set by this function.
.SS SEE ALSO
