.TH "rtcIntersect4/8/16" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcIntersect4/8/16\ \-\ find\ closest\ hit\ for\ ray\ packet
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

void\ rtcIntersect4(
\ \ const\ int*\ valid,
\ \ RTCScene\ scene,
\ \ struct\ RTCIntersectContext*\ context,
\ \ struct\ RTCRay4*\ ray
);

void\ rtcIntersect8(
\ \ const\ int*\ valid,
\ \ RTCScene\ scene,
\ \ struct\ RTCIntersectContext*\ context,
\ \ struct\ RTCRay8*\ ray
);

void\ rtcIntersect16(
\ \ const\ int*\ valid,
\ \ RTCScene\ scene,
\ \ struct\ RTCIntersectContext*\ context,
\ \ struct\ RTCRay16*\ ray
);
\f[]
.fi
.SS DESCRIPTION
.PP
The \f[C]rtcIntersect4/8/16\f[] functions finds the closest hit of a ray
packet of size 4,8, or 16 (\f[C]ray\f[] argument) with the scene
(\f[C]scene\f[] argument).
The closest hit is returned inside the hit components of the ray packet.
See Section \f[C]RTCRay\f[] for a description of the ray layout and how
to setup a ray.
.PP
A ray valid mask has to get provided (\f[C]valid\f[] argument) which
stores one 32\-bit integer (\f[C]\-1\f[] means valid and \f[C]0\f[]
invalid) per ray in the packet.
Only active rays are processed and hit data of inactive rays is not
changed.
.PP
The intersection context (\f[C]context\f[] argument) can specify some
flags to optimize traversal and a filter callback function to be invoked
for every intersection.
Further the pointer to the intersection context is propagated to
callback functions invoked during traversal and can thus be used to
extend the ray with additional data.
See Section \f[C]RTCIntersectContext\f[] for more information.
.PP
The ray pointer passed to callback functions is not guaranteed to be
identical to the original ray provided.
To extend the ray with additional data to be accessed in callback
functions use the intersection context.
.PP
The implementation of these functions is guaranteed to invoke callback
functions always with the same ray packet size and ordering of rays as
specified initially.
.PP
For \f[C]rtcIntersect4\f[] the ray packet has to be aligned to 16 bytes,
for \f[C]rtcIntersect8\f[] alignment has to be 32 bytes, and for
\f[C]rtcIntersect16\f[] alignment has to be 64 bytes.
.PP
Further, \f[C]rtcIntersect4\f[] is only available when Embree was
compiled with EMBREE_RAY_PACKETS turned on in cmake (which is the
default).
Furhter, the \f[C]rtcIntersect8\f[] function is only working if Embree
got compiled with \f[C]AVX\f[] or \f[C]AVX2\f[] and the CPU running on
supports the enabled ISA.
Similar, the \f[C]rtcIntersect16\f[] function is only working if Embree
got compiled with \f[C]AVX512SKX\f[] or \f[C]AVX512KNL\f[] and the CPU
running on supports the enabled ISA.
For this reason, use these functions only after checking if they are
working by using an \f[C]rtcGetDeviceParameter\f[] query.
.SS EXIT STATUS
.PP
For performance reasons this function does not do any error checks, thus
will not set any error flags on failure.
.SS SEE ALSO
.PP
[rtcOccluded4/8/16]
