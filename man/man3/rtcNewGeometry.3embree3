.TH "rtcNewGeometry" "3" "" "" "Embree Ray Tracing Kernels 3"
.SS NAME
.IP
.nf
\f[C]
rtcNewGeometry\ \-\ creates\ a\ new\ geometry\ object
\f[]
.fi
.SS SYNOPSIS
.IP
.nf
\f[C]
#include\ <embree3/rtcore.h>

RTCGeometry\ rtcNewGeometry(RTCDevice\ device,\ enum\ RTCGeometryType\ type);
\f[]
.fi
.SS DESCRIPTION
.PP
Geometries are objects that represent an array of primitives of the same
type.
This function creates a new geometry bound to the specified device and
returns a handle to this geometry.
The geometry object is reference counted with an initial reference count
of 1.
The geometry handle can get released using the
\f[C]rtcReleaseGeometry\f[] API call.
.PP
A geometry type passed at construction time specifies which geometry
type to create.
Supported are triangle meshes (\f[C]RTC_GEOMETRY_TYPE_TRIANGLE\f[]),
quad meshes (triangle pairs) (\f[C]RTC_GEOMETRY_TYPE_QUAD\f[]),
Catmull\-Clark subdivision surfaces
(\f[C]RTC_GEOMETRY_TYPE_SUBDIVISION\f[]), curve geometries with
different basis (\f[C]RTC_GEOMETRY_TYPE_CURVE_LINEAR\f[],
\f[C]RTC_GEOMETRY_TYPE_CURVE_BEZIER\f[],
\f[C]RTC_GEOMETRY_TYPE_CURVE_BSPLINE\f[]), user defined geometries
(\f[C]RTC_GEOMETRY_TYPE_USER\f[]) and instances
(\f[C]RTC_GEOMETRY_TYPE_INSTANCE\f[]).
.PP
After construction geometries are enabled by default and not attached to
any scene.
Geometries can get disabled (\f[C]rtcDisableGeometry\f[] call), enabled
again (\f[C]rtcEnableGeometry\f[] call), and released
(\f[C]rtcReleaseGeometry\f[] call).
.PP
A geometries can get attached to a single scene using the
\f[C]rtcAttachGeometry\f[] call, and detached again using the
\f[C]rtcDetachGeometry\f[] call.
During attachment a geometry ID (\f[C]geomID\f[]) is assigned to the
geometry, which uniquely identifies the geometry inside that scene.
This identifier is returned when primitives of the geometry are hit in
later ray queries of the scene.
The geometry ID can either get assigned by Embree through the
\f[C]rtcAttachGeometry\f[] call, or specified by the user through the
\f[C]rtcAttachGeometryByID\f[] call.
.PP
Geometries can also get modified, including their vertex and index
buffers.
After modifying a buffer \f[C]rtcUpdateGeometryBuffer\f[] has to get
called to notify that a buffer got modified.
After setting up the geometry or modifying it,
\f[C]rtcCommitGeometry\f[] has to get called to finish the geometry
setup.
.PP
After the geometry got committed vertex data interpolation can be
performed using the \f[C]rtcInterpolate\f[] and \f[C]rtcInterpoalteN\f[]
functions.
.PP
The application can use the \f[C]rtcSetGeometryUserData\f[] function to
set a user data pointer to its own geometry representation, and later
read out this pointer again using the \f[C]rtcGetGeometryUserData\f[]
function.
.PP
A build quality can get specified for a geometry to balance between
acceleration structure build performance and ray query performance.
The build quality will be used in case a two level acceleration
structure is build internally.
See Section [rtcSetSceneBuildQuality] for more details.
.SS EXIT STATUS
.PP
On failure \f[C]NULL\f[] is returned and an error code is set that can
get queried using \f[C]rtcDeviceGetError\f[].
.SS SEE ALSO
.PP
[RTC_GEOMETRY_TYPE_TRIANGLE], [RTC_GEOMETRY_TYPE_QUAD],
[RTC_GEOMETRY_TYPE_SUBDIVISION], [RTC_GEOMETRY_TYPE_CURVE_LINEAR],
[RTC_GEOMETRY_TYPE_CURVE_BEZIER], [RTC_GEOMETRY_TYPE_CURVE_BSPLINE],
[RTC_GEOMETRY_TYPE_USER], [RTC_GEOMETRY_TYPE_INSTANCE]
