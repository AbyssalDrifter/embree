// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __RTCORE_SCENE_ISPH__
#define __RTCORE_SCENE_ISPH__

/*! \ingroup embree_kernel_api */
/*! \{ */

/*! forward declarations for ray structures */
struct RTCRay1;
struct RTCRay;
struct RTCRayNp;

/*! acceleration structure flags */
enum RTCAccelFlags
{
  RTC_ACCEL_FAST      = 0,          //!< default mode
  RTC_ACCEL_COMPACT      = (1 << 1),   //!< use memory conservative acceleration structure
  RTC_ACCEL_ROBUST       = (1 << 2),    //!< use acceleration structure that allows robust traversal
  RTC_ACCEL_ROBUST_COMPACT = (1 << 1) | (1 << 2)
};

/*! scene commit flags */
enum RTCBuildQuality
{
  RTC_BUILD_QUALITY_LOW = 0,     //!< create lower quality data structures (for dynamic scenes)
  RTC_BUILD_QUALITY_MEDIUM = 1,  //!< default build quality for most usages
  RTC_BUILD_QUALITY_HIGH = 2,    //!< create higher quality data structures (longer build times)
  RTC_BUILD_QUALITY_REFIT = 3,   //!< refits the BVH
};

/*! some additional flags to control the build */
enum RTCSceneFlags
{
  RTC_SCENE_FLAG_NONE = 0,
  RTC_SCENE_FLAG_DYNAMIC = (1 << 0),                 //!< provides better build performance for dynamic scenes
  RTC_SCENE_FLAG_CONTEXT_FILTER_FUNCTION = (1 << 1)  //!< enables support for intersection filter function inside context
};

/*! intersection flags */
enum RTCIntersectFlags
{
  RTC_INTERSECT_COHERENT   = 0,              //!< optimize for coherent rays
  RTC_INTERSECT_INCOHERENT = 1               //!< optimize for incoherent rays
};

/*! intersection context passed to intersect/occluded calls */
struct RTCIntersectContext
{
  RTCIntersectFlags flags;   //!< intersection flags
  void* filter;              //!< filter function to execute
};

/*! Arguments for RTCFilterFunctionN callback */
struct RTCFilterFunctionNArguments
{
  uniform int* uniform valid;                    /*!< pointer to valid mask */
  void* uniform geomUserPtr;                           /*!< pointer to geometry user data */
  const RTCIntersectContext* uniform context;  /*!< intersection context as passed to rtcIntersect/rtcOccluded */
  struct RTCRayN* uniform ray;                         /*!< ray and previous hit */
  struct RTCHitN* uniform potentialHit;                /*!< potential new hit */
  uniform unsigned int N;                              /*!< number of rays in ray packet */
};

/*! Intersection filter function for ray packets of size N. */
typedef unmasked void (*uniform RTCFilterFunctionN)(const struct RTCFilterFunctionNArguments* uniform const args);

RTCORE_FORCEINLINE void rtcInitIntersectionContext(uniform RTCIntersectContext* context)
{
  context->flags = RTC_INTERSECT_INCOHERENT;
  context->filter = NULL;
}

/*! \brief Defines an opaque scene type */
typedef uniform struct __RTCScene* uniform RTCScene;

/*! Creates a new scene. */
RTCORE_API RTCScene rtcDeviceNewScene (RTCDevice device);

/*! \brief Type of progress callback function. */
typedef unmasked uniform bool (*uniform RTCProgressMonitorFunction)(void* uniform ptr, const uniform double n);

/*! \brief Sets the progress callback function which is called during hierarchy build. */
RTCORE_API void rtcSetProgressMonitorFunction(RTCScene scene, RTCProgressMonitorFunction func, void* uniform ptr);

/*! sets the build mode of a scene */
RTCORE_API void rtcSetAccelFlags(RTCScene scene, uniform RTCAccelFlags accel);

/*! sets the build quality of a scene */
RTCORE_API void rtcSetBuildQuality(RTCScene scene, uniform RTCBuildQuality quality);

/*! sets the build hints of a scene */
RTCORE_API void rtcSetSceneFlags(RTCScene scene, uniform RTCSceneFlags hints);

/*! Commits the geometry of the scene. After initializing or modifying
 *  geometries, commit has to get called before tracing
 *  rays. */
RTCORE_API void rtcCommit (RTCScene scene);

/*! Commits the geometry of the scene in join mode. When Embree is
 *  using TBB (default), threads that call `rtcCommitJoin` will
 *  participate in the hierarchy build procedure. When Embree is using
 *  the internal tasking system, exclusively threads that call
 *  `rtcCommitJoin` will execute the build procedure. Do not
 *  mix `rtcCommitJoin` with other commit calls. */
RTCORE_API void rtcCommitJoin (RTCScene scene);

/*! Returns to AABB of the scene. rtcCommit has to get called
 *  previously to this function. */
RTCORE_API void rtcGetBounds(RTCScene scene, uniform RTCBounds* uniform bounds_o);

/*! Returns linear AABBs of the scene. The result bounds_o gets filled
 *  with AABBs for time 0 and time 1. rtcCommit has to get called
 *  previously to this function. */
RTCORE_API void rtcGetLinearBounds(RTCScene scene, uniform RTCBounds* uniform bounds_o);

/*! Intersects a uniform ray with the scene. This function can only be
 *  called for scenes with the RTC_INTERSECT_UNIFORM flag set. The ray
 *  has to be aligned to 16 bytes. */
RTCORE_API void rtcIntersect1 (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1* uniform ray);

/*! Intersects a varying ray with the scene. This function can only be
 *  called for scenes with the RTC_INTERSECT_VARYING flag set. The
 *  valid mask and ray have both to be aligned to sizeof(varing float)
 *  bytes. */
RTCORE_API void rtcIntersect4  (const int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);
RTCORE_API void rtcIntersect8  (const int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);
RTCORE_API void rtcIntersect16 (const int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);

inline void rtcIntersect (RTCScene scene, const uniform RTCIntersectContext* uniform context, varying RTCRay* uniform ray) 
{
  varying bool mask = __mask & (ray->tnear <= ray->tfar); // FIXME: why do we test tnear<=tfar here?
  unmasked {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16)
    rtcIntersect4((uniform int* uniform)&imask,scene,context,ray);
  else if (sizeof(varying float) == 32)
    rtcIntersect8((uniform int* uniform)&imask,scene,context,ray);
  else if (sizeof(varying float) == 64)
    rtcIntersect16((uniform int* uniform)&imask,scene,context,ray);
}

/*! Intersects a stream of M rays in AOS layout with the scene. This
 *  function can only be called for scenes with the RTC_INTERSECT_STREAM
 *  flag set. The stride specifies the offset between rays in
 *  bytes. */
RTCORE_API void rtcIntersect1M (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1* uniform rays, const uniform unsigned int M, const uniform size_t stride);

/*! Intersects a stream of pointers to M rays with the scene. This
 *  function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. */
RTCORE_API void rtcIntersect1Mp (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1** uniform rays, const uniform unsigned int M);

/*! Intersects a stream of M ray packets of size N in SOA format with the
 *  scene. This function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. The stride specifies the offset between
 *  ray packets in bytes. */
RTCORE_API void rtcIntersectNM (RTCScene scene, const uniform RTCIntersectContext* uniform context, struct RTCRayN* uniform rays, const uniform unsigned int N, const uniform unsigned int M, const uniform size_t stride);

/*! Intersects a stream of M ray packets in SOA format with the scene. This
 *  function can only be called for scenes with the RTC_INTERSECT_STREAM
 *  flag set. The stride specifies the offset between rays in
 *  bytes. */
inline void rtcIntersectVM (RTCScene scene, const uniform RTCIntersectContext* uniform context, varying RTCRay* uniform rays, const uniform unsigned int M, const uniform size_t stride) {
  rtcIntersectNM(scene,context,(struct RTCRayN*)rays,sizeof(varying float)/4,M,stride);
}

/*! Intersects a stream of M ray packets of size N in SOA format with
 *  the scene. This function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. The stride specifies the offset between
 *  ray packets in bytes. In contrast to the rtcIntersectNM function
 *  this function accepts a separate data pointer for each component
 *  of the ray packet. */
RTCORE_API void rtcIntersectNp (RTCScene scene, const uniform RTCIntersectContext* uniform context, const uniform RTCRayNp* uniform rays, const uniform unsigned int N);

/*! Tests if a uniform ray is occluded by the scene. This function can
 *  only be called for scenes with the RTC_INTERSECT_UNIFORM flag
 *  set. The ray has to be aligned to 16 bytes. */
RTCORE_API void rtcOccluded1 (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1* uniform ray);

/*! Tests if a varying ray is occluded by the scene. This function can
 *  only be called for scenes with the RTC_INTERSECT_VARYING flag
 *  set. The valid mask and ray have both to be aligned to
 *  sizeof(varing float) bytes. */
RTCORE_API void rtcOccluded4 (const uniform int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);
RTCORE_API void rtcOccluded8 (const uniform int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);
RTCORE_API void rtcOccluded16(const uniform int* uniform valid, RTCScene scene, const RTCIntersectContext* uniform context, void* uniform ray);

inline void rtcOccluded (RTCScene scene, const uniform RTCIntersectContext* uniform context, varying RTCRay* uniform ray)
{
  varying bool mask = __mask & (ray->tnear <= ray->tfar); // FIXME: why do we test tnear<=tfar here?
  unmasked {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16)
    rtcOccluded4((uniform int* uniform)&imask,scene,context,ray);
  else if (sizeof(varying float) == 32)
    rtcOccluded8((uniform int* uniform)&imask,scene,context,ray);
  else if (sizeof(varying float) == 64)
    rtcOccluded16((uniform int* uniform)&imask,scene,context,ray);
}


/*! Tests if a stream of M rays in AOS layout is occluded by the
 *  scene. This function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. The stride specifies the offset between
 *  rays in bytes.*/
RTCORE_API void rtcOccluded1M (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1* uniform rays, const uniform unsigned int M, const uniform size_t stride);

/*! Tests if a stream of pointers to M rays in AOS layout is occluded by the
 *  scene. This function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. */
RTCORE_API void rtcOccluded1Mp (RTCScene scene, const uniform RTCIntersectContext* uniform context, uniform RTCRay1** uniform rays, const uniform unsigned int M);

/*! Tests if a stream of M ray packets of size N in SOA format is
 *  occluded by the scene. This function can only be called for scenes
 *  with the RTC_INTERSECT_STREAM flag set. The stride specifies the offset
 *  between rays in bytes.*/
RTCORE_API void rtcOccludedNM (RTCScene scene, const uniform RTCIntersectContext* uniform context, struct RTCRayN* uniform rays, const uniform unsigned int N, const uniform unsigned int M, const uniform size_t stride);

/*! Tests if a stream of M ray packets in SOA format is occluded by the
 *  scene. This function can only be called for scenes with the
 *  RTC_INTERSECT_STREAM flag set. The stride specifies the offset between
 *  rays in bytes.*/
inline void rtcOccludedVM (RTCScene scene, const uniform RTCIntersectContext* uniform context, varying RTCRay* uniform rays, const uniform unsigned int M, const uniform size_t stride) {
  rtcOccludedNM(scene,context,(struct RTCRayN*)rays,sizeof(varying float)/4,M,stride);
}

/*! Tests if a stream of M ray packets of size N in SOA format is
 *  occluded by the scene. This function can only be called for scenes
 *  with the RTC_INTERSECT_STREAM flag set. The stride specifies the offset
 *  between rays in bytes. In contrast to the rtcOccludedNM function
 *  this function accepts a separate data pointer for each component
 *  of the ray packet. */
RTCORE_API void rtcOccludedNp (RTCScene scene, const uniform RTCIntersectContext* uniform context, const uniform RTCRayNp* uniform rays, const uniform unsigned int N);

/*! Releases the scene. */
RTCORE_API void rtcReleaseScene (RTCScene scene);

/*! @} */

#endif
