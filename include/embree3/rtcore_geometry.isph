// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_GEOMETRY_ISPH__
#define __EMBREE_GEOMETRY_ISPH__

#include "rtcore_buffer.isph"

/* Geometry type */
enum RTCGeometryType
{
  RTC_GEOMETRY_TYPE_TRIANGLE,
  RTC_GEOMETRY_TYPE_QUAD,
  RTC_GEOMETRY_TYPE_SUBDIVISION,
  RTC_GEOMETRY_TYPE_LINEAR_CURVE,
  RTC_GEOMETRY_TYPE_BEZIER_CURVE,
  RTC_GEOMETRY_TYPE_BSPLINE_CURVE,
  RTC_GEOMETRY_TYPE_USER,
  RTC_GEOMETRY_TYPE_INSTANCE
};

/* Geometry subtype */
enum RTCGeometrySubtype
{
  RTC_GEOMETRY_SUBTYPE_DEFAULT = 0,
  RTC_GEOMETRY_SUBTYPE_ROUND = 1,
  RTC_GEOMETRY_SUBTYPE_FLAT = 2,
};

/* Interpolation mode for subdivision surfaces. */
enum RTCSubdivisionMode
{
  RTC_SUBDIVISION_MODE_NO_BOUNDARY     = 0,
  RTC_SUBDIVISION_MODE_SMOOTH_BOUNDARY = 1,
  RTC_SUBDIVISION_MODE_PIN_CORNERS     = 2,
  RTC_SUBDIVISION_MODE_PIN_BOUNDARY    = 3,
  RTC_SUBDIVISION_MODE_PIN_ALL         = 4,
};

/* Curve segment flags. */
enum RTCCurveFlags
{
  RTC_CURVE_FLAG_NEIGHBOR_LEFT  = (1 << 0), 
  RTC_CURVE_FLAG_NEIGHBOR_RIGHT = (1 << 1) 
};

/* Arguments for RTCBoundsFunction */
struct RTCBoundsFunctionArguments
{
  void* uniform geomUserPtr;
  uniform unsigned int primID;
  uniform unsigned int timeStep;
  uniform RTCBounds* uniform bounds_o;
};

/* Type of bounding function. */
typedef unmasked void (*RTCBoundsFunction)(const struct RTCBoundsFunctionArguments* uniform const args);

/* Arguments for RTCIntersectFunctionN */
struct RTCIntersectFunctionNArguments
{
  uniform int* uniform valid;
  void* uniform geomUserPtr;
  uniform unsigned int primID;
  uniform RTCIntersectContext* uniform context;
  RTCRayN* uniform ray;
  uniform unsigned int N;
};

/* Type of intersect callback function */
typedef unmasked void (*RTCIntersectFunctionN)(const struct RTCIntersectFunctionNArguments* uniform const args);

/* Arguments for RTCOccludedFunctionN */
struct RTCOccludedFunctionNArguments
{
  uniform int* uniform valid;
  void* uniform geomUserPtr;
  uniform unsigned int primID;
  uniform RTCIntersectContext* uniform context;
  RTCRayN* uniform ray;
  uniform unsigned int N;
};

/* Type of occlusion callback function pointer. */
typedef unmasked void (*RTCOccludedFunctionN)(const struct RTCOccludedFunctionNArguments* uniform const args);

/* Reports intersection from intersect callback function. */
RTCORE_API void rtcFilterIntersection(const uniform struct RTCIntersectFunctionNArguments* uniform const args, const uniform RTCFilterFunctionNArguments* uniform filterArgs);

/* Reports intersection from occluded callback function. */
RTCORE_API void rtcFilterOcclusion(const uniform struct RTCOccludedFunctionNArguments* uniform const args, const uniform RTCFilterFunctionNArguments* uniform filterArgs);

/* Defines an opaque geometry type */
typedef uniform struct RTCGeometryTy* uniform RTCGeometry;

/* Arguments for RTCDisplacementFunction callback */
struct RTCDisplacementFunctionNArguments
{
  void* uniform geomUserPtr;
  RTCGeometry geometry;
  uniform unsigned int primID;
  uniform unsigned int timeStep;
  uniform const float* uniform u;
  uniform const float* uniform v;
  uniform const float* uniform Ng_x;
  uniform const float* uniform Ng_y;
  uniform const float* uniform Ng_z;
  uniform float* uniform P_x;
  uniform float* uniform P_y;
  uniform float* uniform P_z;
  uniform unsigned int N;
};

/* Type of displacement mapping callback function. */
typedef unmasked void (*RTCDisplacementFunction)(const struct RTCDisplacementFunctionNArguments* uniform const args);

/* Creates a new geometry of specified type and subtype. */
RTCORE_API RTCGeometry rtcNewGeometry(RTCDevice device, uniform RTCGeometryType type, uniform RTCGeometrySubtype type);

/* Sets the bounding callback function to calculate bounding boxes for user primitives. */
RTCORE_API void rtcSetGeometryBoundsFunction(RTCGeometry geometry, uniform RTCBoundsFunction bounds, void* uniform userPtr);

/* Set intersect callback function for user geometries. */
RTCORE_API  void rtcSetGeometryIntersectFunction(RTCGeometry geometry, uniform RTCIntersectFunctionN intersect);

/* Set occlusion callback function for user geometries. */
RTCORE_API void rtcSetGeometryOccludedFunction(RTCGeometry geometry, uniform RTCOccludedFunctionN occluded);

/* Sets instanced scene of instance geometry. */
RTCORE_API void rtcSetGeometryInstancedScene(RTCGeometry geometry, RTCScene scene);

/* Sets transformation of the instance for specified timestep */
RTCORE_API void rtcSetGeometryTransform(RTCGeometry geometry, uniform RTCFormat format, const void* uniform xfm, uniform unsigned int timeStep);

/* Returns transformation of the instance for specified time. */
RTCORE_API void rtcGetGeometryTransform(RTCGeometry geometry, uniform float time, uniform RTCFormat format, void* uniform xfm);

/* Sets the number of primitives for user geometry. */
RTCORE_API void rtcSetGeometryUserPrimitiveCount(RTCGeometry geometry, uniform unsigned int userPrimCount);

/* Sets the number of time steps. */
RTCORE_API void rtcSetGeometryTimeStepCount(RTCGeometry geometry, uniform unsigned int timeStepCount);

/* Sets the number of vertex attributes. */
RTCORE_API void rtcSetGeometryVertexAttributeCount(RTCGeometry geometry, uniform unsigned int vertexAttributeCount);

/* Sets the number of topologies for subdivision surfaces. */
RTCORE_API void rtcSetGeometryTopologyCount(RTCGeometry geometry, uniform unsigned int topologyCount);

/* Sets a uniform tessellation rate */
RTCORE_API void rtcSetGeometryTessellationRate(RTCGeometry geometry, uniform float tessellationRate);

/* Sets the build quality of the geometry. */
RTCORE_API void rtcSetGeometryBuildQuality(RTCGeometry geometry, uniform RTCBuildQuality quality);

/* Sets the ray mask of the geometry. */
RTCORE_API void rtcSetGeometryMask (RTCGeometry geometry, uniform unsigned int mask);

/* Sets subdivision interpolation mode. */
RTCORE_API void rtcSetGeometrySubdivisionMode(RTCGeometry geometry, uniform unsigned int topologyID, uniform RTCSubdivisionMode mode);

/* Binds a vertex attribute to some topology. */
RTCORE_API void rtcSetGeometryVertexAttributeTopology(RTCGeometry geometry, uniform unsigned int vertexAttributeID, uniform unsigned int topologyID);

/* Sets geometry buffer. */
RTCORE_API void rtcSetGeometryBuffer(RTCGeometry geometry, uniform RTCBufferType type, uniform unsigned int slot, uniform RTCFormat format,
                                     uniform RTCBuffer buffer, uniform uintptr_t byteOffset, uniform uintptr_t byteStride, uniform unsigned int itemCount);

/* Sets shared geometry buffer. */
RTCORE_API void rtcSetSharedGeometryBuffer(RTCGeometry geometry, uniform RTCBufferType type, uniform unsigned int slot, uniform RTCFormat format,
                                           const void* uniform ptr, uniform uintptr_t byteOffset, uniform uintptr_t byteStride, uniform unsigned int itemCount);

/* Sets new geometry buffer. */
RTCORE_API void* uniform rtcSetNewGeometryBuffer(RTCGeometry geometry, uniform RTCBufferType type, uniform unsigned int slot, uniform RTCFormat format,
                                                 uniform uintptr_t byteStride, uniform unsigned int itemCount);

/* Returns a pointer to the buffer data. */
RTCORE_API void* uniform rtcGetGeometryBufferData(RTCGeometry geometry, uniform RTCBufferType type, uniform unsigned int slot);

/* Enable geometry. */
RTCORE_API void rtcEnableGeometry(RTCGeometry geometry);

/* Update geometry buffer. */
RTCORE_API void rtcUpdateGeometryBuffer(RTCGeometry geometry, uniform RTCBufferType type, uniform unsigned int slot);

/* Disable geometry. */
RTCORE_API void rtcDisableGeometry(RTCGeometry geometry);

/* Sets the displacement callback function. */
RTCORE_API void rtcSetGeometryDisplacementFunction(RTCGeometry geometry, uniform RTCDisplacementFunction func);

/* Sets the intersection filter callback function. */
RTCORE_API  void rtcSetGeometryIntersectFilterFunction(RTCGeometry geometry, uniform RTCFilterFunctionN func);

/* Sets the occlusion filter callback function. */
RTCORE_API  void rtcSetGeometryOccludedFilterFunction(RTCGeometry geometry, uniform RTCFilterFunctionN func);

/* Sets user defined data pointer of geometry. */
RTCORE_API void rtcSetGeometryUserData(RTCGeometry geometry, void* uniform ptr);

/* Gets user defined data pointer of geometry. */
RTCORE_API void* uniform rtcGetGeometryUserData(RTCGeometry geometry);

struct RTCInterpolateNArguments
{
  RTCGeometry geometry;
  const void* valid;
  const unsigned int* primIDs;
  const float* u;
  const float* v;
  unsigned int N;
  RTCBufferType bufferType;
  unsigned int bufferSlot;
  float* P;
  float* dPdu;
  float* dPdv;
  float* ddPdudu;
  float* ddPdvdv;
  float* ddPdudv;
  unsigned int valueCount;
};

/* Interpolates vertex data to an array of u/v locations. */
RTCORE_API void rtcInterpolateN(const RTCInterpolateNArguments* uniform args);

RTCORE_FORCEINLINE void rtcInterpolate0(RTCGeometry geometry, varying unsigned int primID, varying float u, varying float v, 
                                         uniform RTCBufferType bufferType, uniform unsigned int bufferSlot,
                                         varying float* uniform P,
                                         uniform unsigned int valueCount)
{
  varying bool mask = __mask;
  unmasked {
    varying int imask = mask ? -1 : 0;
  }
  uniform RTCInterpolateNArguments args;
  args.geometry = geometry;
  args.valid = (const void* uniform)&imask;
  args.primIDs = (const uniform unsigned int* uniform)&primID;
  args.u = (const uniform float* uniform)&u;
  args.v = (const uniform float* uniform)&v;
  args.N = sizeof(varying float)/4;
  args.bufferType = bufferType;
  args.bufferSlot = bufferSlot;
  args.P = (uniform float* uniform)P;
  args.dPdu = NULL;
  args.dPdv = NULL;
  args.ddPdudu = NULL;
  args.ddPdvdv = NULL;
  args.ddPdudv = NULL;
  args.valueCount = valueCount;
  rtcInterpolateN(&args);
}

RTCORE_FORCEINLINE void rtcInterpolate1(RTCGeometry geometry, varying unsigned int primID, varying float u, varying float v, 
                                        uniform RTCBufferType bufferType, uniform unsigned int bufferSlot,
                                        varying float* uniform P, varying float* uniform dPdu, varying float* uniform dPdv,
                                        uniform unsigned int valueCount)
{
  varying bool mask = __mask;
  unmasked {
    varying int imask = mask ? -1 : 0;
  }
  uniform RTCInterpolateNArguments args;
  args.geometry = geometry;
  args.valid = (const void* uniform)&imask;
  args.primIDs = (const uniform unsigned int* uniform)&primID;
  args.u = (const uniform float* uniform)&u;
  args.v = (const uniform float* uniform)&v;
  args.N = sizeof(varying float)/4;
  args.bufferType = bufferType;
  args.bufferSlot = bufferSlot;
  args.P = (uniform float* uniform)P;
  args.dPdu = (uniform float* uniform)dPdu;
  args.dPdv = (uniform float* uniform)dPdv;
  args.ddPdudu = NULL;
  args.ddPdvdv = NULL;
  args.ddPdudv = NULL;
  args.valueCount = valueCount;
  rtcInterpolateN(&args);
}

RTCORE_FORCEINLINE void rtcInterpolate2(RTCGeometry geometry, varying unsigned int primID, varying float u, varying float v, 
                                        uniform RTCBufferType bufferType, uniform unsigned int bufferSlot,
                                        varying float* uniform P, varying float* uniform dPdu, varying float* uniform dPdv,
                                        varying float* uniform ddPdudu, varying float* uniform ddPdvdv, varying float* uniform ddPdudv,
                                        uniform unsigned int valueCount)
{
  varying bool mask = __mask;
  unmasked {
    varying int imask = mask ? -1 : 0;
  }
  uniform RTCInterpolateNArguments args;
  args.geometry = geometry;
  args.valid = (const void* uniform)&imask;
  args.primIDs = (const uniform unsigned int* uniform)&primID;
  args.u = (const uniform float* uniform)&u;
  args.v = (const uniform float* uniform)&v;
  args.N = sizeof(varying float)/4;
  args.bufferType = bufferType;
  args.bufferSlot = bufferSlot;
  args.P = (uniform float* uniform)P;
  args.dPdu = (uniform float* uniform)dPdu;
  args.dPdv = (uniform float* uniform)dPdv;
  args.ddPdudu = (uniform float* uniform)ddPdudu;
  args.ddPdvdv = (uniform float* uniform)ddPdvdv;
  args.ddPdudv = (uniform float* uniform)ddPdudv;
  args.valueCount = valueCount;
  rtcInterpolateN(&args);
}

/* Commits the geometry. */
RTCORE_API void rtcCommitGeometry(RTCGeometry geometry);

/* Attaches the geometry to some scene. */
RTCORE_API uniform unsigned int rtcAttachGeometry(RTCScene scene, RTCGeometry geometry);

/* Attaches the geometry to some scene using the specified geometry ID. */
RTCORE_API void rtcAttachGeometryByID(RTCScene scene, RTCGeometry geometry, uniform unsigned int geomID);

/* Detaches the geometry from the scene. */
RTCORE_API void rtcDetachGeometry(RTCScene scene, uniform unsigned int geomID);

/* Retains the geometry (increments reference count). */
RTCORE_API void rtcRetainGeometry(RTCGeometry geometry);

/* Releases the geometry handle (decrements refence count). */
RTCORE_API void rtcReleaseGeometry(RTCGeometry geometry);

/* Gets geometry handle from scene. */
RTCORE_API RTCGeometry rtcGetGeometry(RTCScene scene, uniform unsigned int geomID);

#endif
