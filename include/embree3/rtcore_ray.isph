// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __RTC_RAY_ISPH__
#define __RTC_RAY_ISPH__

#include "rtcore_common.isph"

/* Ray structure */
struct RTC_ALIGN(16) RTCRay
{
  /* ray data */
  float org_x;         // x coordinate of ray origin
  float org_y;         // y coordinate of ray origin
  float org_z;         // z coordinate of ray origin
  float tnear;         // start of ray segment

  float dir_x;         // x coordinate of ray direction
  float dir_y;         // y coordinate of ray direction
  float dir_z;         // z coordinate of ray direction
  float tfar;          // end of ray segment (set to hit distance)

  float time;          // time of this ray for motion blur
  unsigned int mask;   // ray mask
  unsigned int id;     // ray ID
  unsigned int flags;  // ray flags
};

/* Hit structure. */
struct RTCHit
{
  /* hit data */
  float Ng_x;          // x coordinate of geometry normal
  float Ng_y;          // y coordinate of geometry normal
  float Ng_z;          // z coordinate of geometry normal
   
  float u;             // barycentric u coordinate of hit
  float v;             // barycentric v coordinate of hit

  unsigned int primID; // geometry ID
  unsigned int geomID; // primitive ID
  unsigned int instID[RTC_MAX_INSTANCE_LEVEL_COUNT];   // instance ID
};

struct RTCRayHit
{
  RTCRay ray;
  RTCHit hit;
};

struct RTCRayN;
struct RTCHitN;
struct RTCRayHitN;

/* Helper functions to access ray packets of runtime size N */
RTC_FORCEINLINE varying float& RTCRayN_org_x(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[0*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_org_y(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[1*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_org_z(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[2*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_tnear(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[3*N+i]); }

RTC_FORCEINLINE varying float& RTCRayN_dir_x(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[4*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_dir_y(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[5*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_dir_z(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[6*N+i]); }
RTC_FORCEINLINE varying float& RTCRayN_tfar (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[7*N+i]); }

RTC_FORCEINLINE varying float&        RTCRayN_time (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[8*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCRayN_mask (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[9*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCRayN_id   (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[10*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCRayN_flags(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[11*N+i]); }

/* Helper functions to access hit packets of size N */
RTC_FORCEINLINE varying float& RTCHitN_Ng_x(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[0*N+i]); }
RTC_FORCEINLINE varying float& RTCHitN_Ng_y(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[1*N+i]); }
RTC_FORCEINLINE varying float& RTCHitN_Ng_z(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[2*N+i]); }
RTC_FORCEINLINE varying float& RTCHitN_u   (const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[3*N+i]); }
RTC_FORCEINLINE varying float& RTCHitN_v   (const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[4*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCHitN_primID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((unsigned int* uniform  )ptr)[5*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCHitN_geomID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((unsigned int* uniform  )ptr)[6*N+i]); }
RTC_FORCEINLINE varying unsigned int& RTCHitN_instID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i, uniform unsigned int l) { return *((varying unsigned int* uniform) &((unsigned int* uniform)ptr)[7*N+i+l*N]); }

/* Helper functions to extract RTCRayN and RTCHitN from RTCRayHitN */
RTC_FORCEINLINE RTCRayN* uniform RTCRayHitN_RayN(RTCRayHitN* uniform ptr, uniform unsigned int N) { return (RTCRayN* uniform)&((uniform float* uniform)ptr)[0*N]; }
RTC_FORCEINLINE RTCHitN* uniform RTCRayHitN_HitN(RTCRayHitN* uniform ptr, uniform unsigned int N) { return (RTCHitN* uniform)&((uniform float* uniform)ptr)[12*N]; }

/* Ray structure template for packets of N rays in pointer SOA layout. */
struct RTCRayNp
{
  /* ray data */
  uniform float* uniform org_x;
  uniform float* uniform org_y;
  uniform float* uniform org_z;
  uniform float* uniform tnear;

  uniform float* uniform dir_x;
  uniform float* uniform dir_y;
  uniform float* uniform dir_z;
  uniform float* uniform tfar;
 
  uniform float* uniform time;
  uniform unsigned int* uniform mask;
  uniform unsigned int* uniform id;
  uniform unsigned int* uniform flags;
};

/* Ray structure template for packets of N rays in pointer SOA layout. */
struct RTCHitNp
{
  /* hit data */
  uniform float* uniform Ng_x;
  uniform float* uniform Ng_y;
  uniform float* uniform Ng_z;

  uniform float* uniform u;
  uniform float* uniform v;

  uniform unsigned int* uniform primID;
  uniform unsigned int* uniform geomID;
  uniform unsigned int* uniform instID[RTC_MAX_INSTANCE_LEVEL_COUNT];
};

struct RTCRayHitNp
{
  RTCRayNp ray;
  RTCRayNp hit;
};

RTC_FORCEINLINE RTCRay rtcGetRayFromRayN(RTCRayN* uniform rays, uniform unsigned int N, uniform unsigned int i)
{
  RTCRay ray;
  ray.org_x  = RTCRayN_org_x(rays,N,i);
  ray.org_y  = RTCRayN_org_y(rays,N,i);
  ray.org_z  = RTCRayN_org_z(rays,N,i);
  ray.tnear  = RTCRayN_tnear(rays,N,i);
  ray.dir_x  = RTCRayN_dir_x(rays,N,i);
  ray.dir_y  = RTCRayN_dir_y(rays,N,i);
  ray.dir_z  = RTCRayN_dir_z(rays,N,i);
  ray.tfar   = RTCRayN_tfar(rays,N,i);
  ray.time   = RTCRayN_time(rays,N,i);
  ray.mask   = RTCRayN_mask(rays,N,i);
  ray.id     = RTCRayN_id(rays,N,i);
  ray.flags  = RTCRayN_flags(rays,N,i);
  return ray;
};

RTC_FORCEINLINE RTCHit rtcGetHitFromHitN(RTCHitN* uniform hits, uniform unsigned int N, uniform unsigned int i)
{
  RTCHit hit;
  hit.Ng_x   = RTCHitN_Ng_x(hits,N,i);
  hit.Ng_y   = RTCHitN_Ng_y(hits,N,i);
  hit.Ng_z   = RTCHitN_Ng_z(hits,N,i);
  hit.u      = RTCHitN_u(hits,N,i);
  hit.v      = RTCHitN_v(hits,N,i);
  hit.primID = RTCHitN_primID(hits,N,i);
  hit.geomID = RTCHitN_geomID(hits,N,i);
  for (uniform unsigned int l = 0; l < RTC_MAX_INSTANCE_LEVEL_COUNT; l++)
    hit.instID[l] = RTCHitN_instID(hits,N,i,l);
  return hit;
};

RTC_FORCEINLINE RTCRayHit rtcGetRayHitFromRayHitN(RTCRayHitN* uniform rayhit, uniform unsigned int N, uniform unsigned int i)
{
  RTCRayHit rh;
  RTCRayN* uniform ray  = RTCRayHitN_RayN(rayhit,N);
  rh.ray.org_x  = RTCRayN_org_x(ray,N,i);
  rh.ray.org_y  = RTCRayN_org_y(ray,N,i);
  rh.ray.org_z  = RTCRayN_org_z(ray,N,i);
  rh.ray.tnear  = RTCRayN_tnear(ray,N,i);
  rh.ray.dir_x  = RTCRayN_dir_x(ray,N,i);
  rh.ray.dir_y  = RTCRayN_dir_y(ray,N,i);
  rh.ray.dir_z  = RTCRayN_dir_z(ray,N,i);
  rh.ray.tfar   = RTCRayN_tfar(ray,N,i);
  rh.ray.time   = RTCRayN_time(ray,N,i);
  rh.ray.mask   = RTCRayN_mask(ray,N,i);
  rh.ray.id     = RTCRayN_id(ray,N,i);
  rh.ray.flags  = RTCRayN_flags(ray,N,i);
  RTCHitN* uniform hit  = RTCRayHitN_HitN(rayhit,N);
  rh.hit.Ng_x   = RTCHitN_Ng_x(hit,N,i);
  rh.hit.Ng_y   = RTCHitN_Ng_y(hit,N,i);
  rh.hit.Ng_z   = RTCHitN_Ng_z(hit,N,i);
  rh.hit.u      = RTCHitN_u(hit,N,i);
  rh.hit.v      = RTCHitN_v(hit,N,i);
  rh.hit.primID = RTCHitN_primID(hit,N,i);
  rh.hit.geomID = RTCHitN_geomID(hit,N,i);
  for (uniform unsigned int l = 0; l < RTC_MAX_INSTANCE_LEVEL_COUNT; l++)
    rh.hit.instID[l] = RTCHitN_instID(hit,N,i,l);
  return rh;
};


RTC_FORCEINLINE void rtcCopyHitToRayHit(varying RTCRayHit* uniform rh, const varying RTCHit* uniform hit, varying float t)
{
  rh->ray.tfar = t;
  rh->hit.Ng_x = hit->Ng_x;
  rh->hit.Ng_y = hit->Ng_y;
  rh->hit.Ng_z = hit->Ng_z;  
  rh->hit.u = hit->u;
  rh->hit.v = hit->v;
  rh->hit.primID = hit->primID;
  rh->hit.geomID = hit->geomID;
  for (uniform unsigned int l = 0; l < RTC_MAX_INSTANCE_LEVEL_COUNT; l++)
    rh->hit.instID[l] = hit->instID[l];
}

RTC_FORCEINLINE void rtcCopyHitToRayHitN(RTCRayHitN* uniform rayhitn, const varying RTCHit* uniform hit, varying float t, uniform unsigned int N, uniform unsigned int i)
{
  RTCRayN* uniform rayn  = RTCRayHitN_RayN(rayhitn,N);
  RTCRayN_tfar(rayn,N,i)   = t;
  RTCHitN* uniform hitn  = RTCRayHitN_HitN(rayhitn,N);
  RTCHitN_Ng_x(hitn,N,i)   = hit->Ng_x;
  RTCHitN_Ng_y(hitn,N,i)   = hit->Ng_y;
  RTCHitN_Ng_z(hitn,N,i)   = hit->Ng_z;
  RTCHitN_u(hitn,N,i)      = hit->u;
  RTCHitN_v(hitn,N,i)      = hit->v;
  RTCHitN_primID(hitn,N,i) = hit->primID;
  RTCHitN_geomID(hitn,N,i) = hit->geomID;
  for (uniform unsigned int l = 0; l < RTC_MAX_INSTANCE_LEVEL_COUNT; l++)
    RTCHitN_instID(hitn,N,i,l) = hit->instID[l];
}

RTC_FORCEINLINE void rtcCopyHitFromRayHitToRayHitN(RTCRayHitN* uniform rayhitn, const varying RTCRayHit* uniform rh, uniform unsigned int N, uniform unsigned int i)
{
  RTCRayN* uniform rayn  = RTCRayHitN_RayN(rayhitn,N);
  RTCRayN_tfar(rayn,N,i)   = rh->ray.tfar;
  RTCHitN* uniform hitn  = RTCRayHitN_HitN(rayhitn,N);
  RTCHitN_Ng_x(hitn,N,i)   = rh->hit.Ng_x;
  RTCHitN_Ng_y(hitn,N,i)   = rh->hit.Ng_y;
  RTCHitN_Ng_z(hitn,N,i)   = rh->hit.Ng_z;
  RTCHitN_u(hitn,N,i)      = rh->hit.u;
  RTCHitN_v(hitn,N,i)      = rh->hit.v;
  RTCHitN_primID(hitn,N,i) = rh->hit.primID;
  RTCHitN_geomID(hitn,N,i) = rh->hit.geomID;
  for (uniform unsigned int l = 0; l < RTC_MAX_INSTANCE_LEVEL_COUNT; l++)
    RTCHitN_instID(hitn,N,i,l) = rh->hit.instID[l];
}

#endif
