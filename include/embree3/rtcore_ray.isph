// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __RTCORE_RAY_ISPH__
#define __RTCORE_RAY_ISPH__

#include "rtcore_common.isph"

/* Ray structure */
struct RTCORE_ALIGN(16) RTCRay
{
  /* ray data */
  float org_x;         // x coordinate of ray origin
  float org_y;         // y coordinate of ray origin
  float org_z;         // z coordinate of ray origin
  float tnear;         // start of ray segment

  float dir_x;         // x coordinate of ray direction
  float dir_y;         // y coordinate of ray direction
  float dir_z;         // z coordinate of ray direction
  float tfar;          // end of ray segment (set to hit distance)

  float time;          // time of this ray for motion blur
  unsigned int mask;   // ray mask
  unsigned int id;     // ray ID
  unsigned int flags;  // ray flags
  
  /* hit data */
  float Ng_x;          // x coordinate of geometry normal
  float Ng_y;          // y coordinate of geometry normal
  float Ng_z;          // z coordinate of geometry normal
   
  float u;             // barycentric u coordinate of hit
  float v;             // barycentric v coordinate of hit

  unsigned int primID; // geometry ID
  unsigned int geomID; // primitive ID
  unsigned int instID[RTC_MAX_INSTANCE_LEVELS];   // instance ID
};

/* Helper functions to access ray packets of runtime size N */
struct RTCRayN;
inline varying float& RTCRayN_org_x(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[0*N+i]); }
inline varying float& RTCRayN_org_y(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[1*N+i]); }
inline varying float& RTCRayN_org_z(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[2*N+i]); }
inline varying float& RTCRayN_tnear(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[3*N+i]); }

inline varying float& RTCRayN_dir_x(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[4*N+i]); }
inline varying float& RTCRayN_dir_y(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[5*N+i]); }
inline varying float& RTCRayN_dir_z(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[6*N+i]); }
inline varying float& RTCRayN_tfar (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[7*N+i]); }

inline varying float&        RTCRayN_time (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[8*N+i]); }
inline varying unsigned int& RTCRayN_mask (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[9*N+i]); }
inline varying unsigned int& RTCRayN_id   (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[10*N+i]); }
inline varying unsigned int& RTCRayN_flags(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*)ptr)[11*N+i]); }

inline varying float& RTCRayN_Ng_x(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[12*N+i]); }
inline varying float& RTCRayN_Ng_y(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[13*N+i]); }
inline varying float& RTCRayN_Ng_z(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[14*N+i]); }

inline varying float& RTCRayN_u   (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[15*N+i]); }
inline varying float& RTCRayN_v   (RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((uniform float*)ptr)[16*N+i]); }

inline varying unsigned int& RTCRayN_primID(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*  )ptr)[17*N+i]); }
inline varying unsigned int& RTCRayN_geomID(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int* uniform) &((uniform unsigned int*  )ptr)[18*N+i]); }
inline varying unsigned int& RTCRayN_instID(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i, uniform unsigned int l) { return *((varying unsigned int* uniform) &((uniform unsigned int*  )ptr)[19*N+i+l*N]); }

/* Ray structure template for packets of N rays in pointer SOA layout. */
struct RTCRayNp
{
  /* ray data */
  uniform float* uniform org_x;
  uniform float* uniform org_y;
  uniform float* uniform org_z;
  uniform float* uniform tnear;

  uniform float* uniform dir_x;
  uniform float* uniform dir_y;
  uniform float* uniform dir_z;
  uniform float* uniform tfar;
 
  uniform float* uniform time;
  uniform unsigned int* uniform mask;
  uniform unsigned int* uniform id;
  uniform unsigned int* uniform flags;

  /* hit data */
  uniform float* uniform Ng_x;
  uniform float* uniform Ng_y;
  uniform float* uniform Ng_z;

  uniform float* uniform u;
  uniform float* uniform v;

  uniform unsigned int* uniform primID;
  uniform unsigned int* uniform geomID;
  uniform unsigned int* uniform instID[RTC_MAX_INSTANCE_LEVELS];
};

/* Hit structure. */
struct RTCHit
{
  /* hit data */
  float Ng_x;
  float Ng_y;
  float Ng_z;

  float t;
  float u;
  float v;

  unsigned int primID;
  unsigned int geomID;
  unsigned int instID[RTC_MAX_INSTANCE_LEVELS];
};

/* Helper functions to access hit packets of size N */
struct RTCHitN;
inline varying float& RTCHitN_Ng_x(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[0*N+i]); }
inline varying float& RTCHitN_Ng_y(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[1*N+i]); }
inline varying float& RTCHitN_Ng_z(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[2*N+i]); }
inline varying float& RTCHitN_t   (const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[3*N+i]); }
inline varying float& RTCHitN_u   (const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[4*N+i]); }
inline varying float& RTCHitN_v   (const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying float* uniform) &((float* uniform)ptr)[5*N+i]); }
inline varying unsigned int& RTCHitN_primID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int*   uniform) &((unsigned int* uniform  )ptr)[6*N+i]); }
inline varying unsigned int& RTCHitN_geomID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i) { return *((varying unsigned int*   uniform) &((unsigned int* uniform  )ptr)[7*N+i]); }
inline varying unsigned int& RTCHitN_instID(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i, uniform unsigned int l) { return *((varying unsigned int*   uniform) &((unsigned int* uniform  )ptr)[8*N+i+l*N]); }

inline RTCRay RTCRayNtoRTCRay(RTCRayN* uniform ptr, uniform unsigned int N, uniform unsigned int i)
{
  RTCRay ray;
  ray.org_x   = RTCRayN_org_x(ptr,N,i);
  ray.org_y   = RTCRayN_org_y(ptr,N,i);
  ray.org_z   = RTCRayN_org_z(ptr,N,i);
  ray.tnear   = RTCRayN_tnear(ptr,N,i);
  ray.dir_x   = RTCRayN_dir_x(ptr,N,i);
  ray.dir_y   = RTCRayN_dir_y(ptr,N,i);
  ray.dir_z   = RTCRayN_dir_z(ptr,N,i);
  ray.tfar    = RTCRayN_tfar(ptr,N,i);
  ray.time    = RTCRayN_time(ptr,N,i);
  ray.mask    = RTCRayN_mask(ptr,N,i);
  ray.id      = RTCRayN_id(ptr,N,i);
  ray.flags   = RTCRayN_flags(ptr,N,i);
  ray.Ng_x    = RTCRayN_Ng_x(ptr,N,i);
  ray.Ng_y    = RTCRayN_Ng_y(ptr,N,i);
  ray.Ng_z    = RTCRayN_Ng_z(ptr,N,i);
  ray.u       = RTCRayN_u(ptr,N,i);
  ray.v       = RTCRayN_v(ptr,N,i);
  ray.primID  = RTCRayN_primID(ptr,N,i);
  ray.geomID  = RTCRayN_geomID(ptr,N,i);
  for (uniform unsigned int l=0;l<RTC_MAX_INSTANCE_LEVELS;l++)
    ray.instID[l]  = RTCRayN_instID(ptr,N,i,l);
  return ray;
};

inline RTCHit RTCHitNtoRTCHit(const RTCHitN* uniform ptr, uniform unsigned int N, uniform unsigned int i)
{
  RTCHit hit;
  hit.Ng_x    = RTCHitN_Ng_x(ptr,N,i);
  hit.Ng_y    = RTCHitN_Ng_y(ptr,N,i);
  hit.Ng_z    = RTCHitN_Ng_z(ptr,N,i);
  hit.t       = RTCHitN_t(ptr,N,i);
  hit.u       = RTCHitN_u(ptr,N,i);
  hit.v       = RTCHitN_v(ptr,N,i);
  hit.primID  = RTCHitN_primID(ptr,N,i);
  hit.geomID  = RTCHitN_geomID(ptr,N,i);
  for (uniform unsigned int l=0;l<RTC_MAX_INSTANCE_LEVELS;l++)
    hit.instID[l]  = RTCHitN_instID(ptr,N,i,l);
  return hit;
};

inline void copyRTCHitToRTCRay(varying RTCRay *uniform ray, varying RTCHit *uniform hit)
{
  ray->Ng_x   = hit->Ng_x;
  ray->Ng_y   = hit->Ng_y;
  ray->Ng_z   = hit->Ng_z;  
  ray->tfar   = hit->t;
  ray->u      = hit->u;
  ray->v      = hit->v;
  ray->primID = hit->primID;
  ray->geomID = hit->geomID;
  for (uniform unsigned int l=0;l<RTC_MAX_INSTANCE_LEVELS;l++)
    ray->instID[l] = hit->instID[l];
}

inline void copyRTCHitToRTCRayN(RTCRayN *uniform rays, varying RTCHit *uniform hit, uniform unsigned int N, uniform unsigned int ui)
{
  RTCRayN_Ng_x(rays,N,ui)   = hit->Ng_x;
  RTCRayN_Ng_y(rays,N,ui)   = hit->Ng_y;
  RTCRayN_Ng_z(rays,N,ui)   = hit->Ng_z;
  RTCRayN_tfar(rays,N,ui)   = hit->t;
  RTCRayN_u(rays,N,ui)      = hit->u;
  RTCRayN_v(rays,N,ui)      = hit->v;
  RTCRayN_primID(rays,N,ui) = hit->primID;
  RTCRayN_geomID(rays,N,ui) = hit->geomID;
  for (uniform unsigned int l=0;l<RTC_MAX_INSTANCE_LEVELS;l++)
    RTCRayN_instID(rays,N,ui,l) = hit->instID[l];
}

inline void copyHitFromRTCRayToRTCRayN(RTCRayN *uniform rays, varying RTCRay *uniform ray, uniform unsigned int N, uniform unsigned int ui)
{
  RTCRayN_Ng_x(rays,N,ui)   = ray->Ng_x;
  RTCRayN_Ng_y(rays,N,ui)   = ray->Ng_y;
  RTCRayN_Ng_z(rays,N,ui)   = ray->Ng_z;
  RTCRayN_tfar(rays,N,ui)   = ray->tfar;
  RTCRayN_u(rays,N,ui)      = ray->u;
  RTCRayN_v(rays,N,ui)      = ray->v;
  RTCRayN_primID(rays,N,ui) = ray->primID;
  RTCRayN_geomID(rays,N,ui) = ray->geomID;
  for (uniform unsigned int l=0;l<RTC_MAX_INSTANCE_LEVELS;l++)
    RTCRayN_instID(rays,N,ui,l) = ray->instID[l];
}

#endif
