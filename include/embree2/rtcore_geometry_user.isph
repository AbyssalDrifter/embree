// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __RTCORE_USER_GEOMETRY_ISPH__
#define __RTCORE_USER_GEOMETRY_ISPH__

/*! \ingroup embree_kernel_api_ispc */
/*! \{ */

/*! Type of bounding function. */
typedef unmasked void (*RTCBoundsFunc)(void* uniform userPtr,            /*!< pointer to user data */
                                       void* uniform geomUserPtr,        /*!< pointer to geometry user data */
                                       uniform unsigned int item,              /*!< item to calculate bounds for */
                                       uniform unsigned int time,              /*!< time to calculate bounds for */
                                       uniform RTCBounds* uniform bounds_o       /*!< returns calculated bounds */);


/*! Type of intersect function pointer for ray packets of size N. */
typedef unmasked void (*RTCIntersectFuncN)(const uniform int* uniform valid, /*! pointer to valid mask */
                                           void* uniform ptr,                /*!< pointer to geometry user data */
                                           const uniform RTCIntersectContext* uniform context,  /*!< intersection context as passed to rtcIntersect/rtcOccluded */
                                           RTCRayN* uniform rays,               /*!< ray packet of size N */
                                           uniform unsigned int N,                 /*< number of rays in ray packet */
                                           uniform unsigned int item              /*< item to intersect */);

/*! Type of occlusion function pointer for ray packets of size N. */
typedef unmasked void (*RTCOccludedFuncN) (const uniform int* uniform valid,  /*! pointer to valid mask */
                                           void* uniform ptr,                 /*!< pointer to geometry user data */ 
                                           const uniform RTCIntersectContext* uniform context,  /*!< intersection context as passed to rtcIntersect/rtcOccluded */
                                           RTCRayN* uniform rays,                 /*!< ray packet of size N */
                                           uniform unsigned int N,                  /*< number of rays in ray packet*/
                                           uniform unsigned int item                /*< item to test for occlusion */);


/*! Creates a new user geometry object. This feature makes it possible
 *  to add arbitrary types of geometry to the scene by providing
 *  appropiate intersect and occluded functions, as well as a bounding
 *  box of the implemented geometry. As the rtcIntersect and
 *  rtcOccluded functions support different ray packet sizes, the user
 *  also has to provide different versions of intersect and occluded
 *  function pointers for the different packet sized. However, only
 *  rtcIntersect and rtcOccluded functions of specific packet sizes
 *  are called, it is sufficient to provide only the corresponding
 *  function pointer for the user geometry. However, the functions
 *  provided have to intersect the same geometry. A user data pointer,
 *  that points to a user specified representation of the geometry, is
 *  passed to each intersect and occluded function invokation. */
RTCORE_API RTCGeometry rtcNewUserGeometry (RTCDevice device,
                                           uniform RTCGeometryFlags flags,  //!< geometry flags
                                           uniform unsigned int numGeometries,    /*!< the number of geometries contained in the set */
                                           uniform unsigned int numTimeSteps = 1  /*!< number of motion blur time steps */
  );

/*! Sets the bounding function to calculate bounding boxes of the user
 *  geometry items when building spatial index structures. The
 *  calculated bounding box have to be conservative and should be
 *  tight.*/
RTCORE_API void rtcSetBoundsFunction (RTCGeometry hgeometry, uniform RTCBoundsFunc bounds, void* uniform userPtr);

/*! Set intersect function for ray packets of size N. The rtcIntersectN function
 *  will call the passed function for intersecting the user
 *  geometry. */
RTCORE_API  void rtcSetIntersectFunction (RTCGeometry hgeometry, uniform RTCIntersectFuncN intersect);

/*! Set occlusion function for a ray packets of size N. The rtcOccludedN function
 *  will call the passed function for intersecting the user
 *  geometry. */
RTCORE_API void rtcSetOccludedFunction (RTCGeometry hgeometry, uniform RTCOccludedFuncN occluded);

/*! @} */

#endif
